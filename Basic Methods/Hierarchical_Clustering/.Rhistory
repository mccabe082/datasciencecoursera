xlab = "Interval",
type = "l"
)
# prepare libraries etc...
library(data.table)
set.seed(71675)
### DECLARING SOME HELPER FUNCTIONS UP HERE ###
# helper function for padding time strings to %H%M format
pad0000<-function(x){
paste0(paste0(rep("0",4-nchar(x)),collapse=""),collapse="",x)
}
# helper function for getting hour from POSIXct - takes a time& date object returns hours on the clock
hour<-function(x){
as.POSIXlt(x)$hour
}
# helper function for getting min from POSIXct - takes a time&date object returns minutes on the clock
min<-function(x){
as.POSIXlt(x)$min
}
# helper function determines if time is on a weekend - takes a time&sdate object returns a boolean
weekend<-function(time){
wday<-weekdays(time)
return((wday=="Saturday")||(wday=="Sunday"))
}
# helper function for dropping date from POSIXct - takes the time&date object - retuns a time object (kind of)
clocktime<-function(datetime){
as.POSIXct(               # create a new POSIXct
paste(                  # using only the
hour(datetime),       # hour and
minute(datetime),     # minute of old POSIXct
sep="-"
),
format = "%H-%M"
)
}
# will try using data.table for a change.
data_raw<-fread(file="activity.csv")
# get the refined the raw data
data_clean<-data_raw[       # Take the raw data...
,                         # for every row
.(                        # merge each date and time recording into a POSIXct object
steps,
time = as.POSIXct(
paste(date, sapply(interval,pad0000), sep="|"),
format = "%F|%H%M"
)
)
][
order(time)               # Ensure chronological ordering - sanity check
]
# use helper function to get step totals for each day
step_total<-data_clean[           # Take data_clean...
!is.na(steps),                  # exclude any missing observations
.(                              # then calculate...
steps = sum(steps)            # - calculate the total steps
),
.(date = as.Date(time))         # for each date (year day)
]
# plot the total daily steps for each year day
plot(
x=step_total$date,
xlab = "Observation Date",
y=step_total$steps,
ylab = "Recorded Steps",
type = "h",
col="red",
lwd=2.
)
points(
x=step_total$date,
y=step_total$steps,
pch=16,
col="blue"
)
# print a simple histogram to the graphics device
hist(
step_total$steps,
breaks = 8,
col = "blue",
main = "Daily Step Totals",
xlab = "No. steps recorded"
)
# calculate the number of steps for each day
step_total[
,                        # for all observations
.(
mean=mean(steps),      # calculate the mean steps
median=median(steps)   # calculate the median steps
)
]
# get average activity dsta
activity_data<-data_clean[
!is.na(steps),                     # excluding missing data
.(                                 # calculate...
clocktime=clocktime(time),       # - time of day
steps                            # - steps
)
][
,                                  # for all data
.(                                 # calculate...
mean_steps = mean(steps)         # - average steps
),
.(                                 # grouping by...
clocktime                        # - time of day
)
]
# plot activity
plot(
x=activity_data$clocktime,
y=activity_data$mean_steps,
main = "Averaged Daily Activity",
xlab = "o'clock time",
ylab = "Recorded Step Average",
type="l",
col="red"
)
install.packages(dplyr)
"dplyr"
install.packages("dplyr)
)
""
)
"
install.packages("dplyr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
distxy<- dist(dt)
distxy<- dist(dt)
distxy<- dist(dt)
library(data.table)
dt<-data.table(x=x,y=y)
dist(dt)
set.seed(71675)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each = 4), sd = 0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col="blue", pch=19,cex=2)
text(x+0.05, y+0.05, labels = as.character(1:12))
library(data.table)
dt<-data.table(x=x,y=y)
dist(dt)
distxy<- dist(dt)
hClustering<-hclust(distxy)
plot(hClustering)
distxy<- dist(dt)
hClustering<-hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col=rep(1:3, each = 4))
distxy<- dist(dt)
hClustering<-hclust(distxy)
plclust(hClustering, lab = rep(1:3, each = 4), lab.col=rep(1:3, each = 4))
hClustering
attributes(hClustering)
hClustering$height
hClustering$dist.method
plot(hClustering)
plot(hClustering,col="blue")
?hclust
plot(hClustering,col=x)
x
plot(hClustering,col=y)
plot(hClustering,col=1:10)
1:10
plot(hClustering,col=1:10)
colorRamp(c("blue","red"))
pal<-colorRamp(c("blue","red"))
pal(1)
pal(0.3)
pal(0)
distxy<- dist(dt)
hClustering<-hclust(distxy)
pal<-colorRamp(c("blue","red"))
plot(hClustering, col=pal(x))
library(data.table)
dt<-data.table(x=x,y=y)
dist(dt)
distxy<- dist(dt)
hClustering<-hclust(distxy)
pal<-colorRamp(c("blue","red"))
plot(hClustering, col=pal(x))
distxy<- dist(dt)
hClustering<-hclust(distxy)
pal<-colorRamp(c("blue","red"))
plot(hClustering, col=sapply(x,pal))
# Generate data
set.seed(12345)
desc.1 <- c(rnorm(10, 0, 1), rnorm(20, 10, 4))
desc.2 <- c(rnorm(5, 20, .5), rnorm(5, 5, 1.5), rnorm(20, 10, 2))
desc.3 <- c(rnorm(10, 3, .1), rnorm(15, 6, .2), rnorm(5, 5, .3))
data <- cbind(desc.1, desc.2, desc.3)
# Create dendrogram
d <- dist(data)
hc <- as.dendrogram(hclust(d))
# Function to color branches
colbranches <- function(n, col)
{
a <- attributes(n) # Find the attributes of current node
# Color edges with requested color
attr(n, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
n # Don't forget to return the node!
}
# Color the first sub-branch of the first branch in red,
# the second sub-branch in orange and the second branch in blue
hc[[1]][[1]] = dendrapply(hc[[1]][[1]], colbranches, "red")
hc[[1]][[2]] = dendrapply(hc[[1]][[2]], colbranches, "orange")
hc[[2]] = dendrapply(hc[[2]], colbranches, "blue")
# Plot
plot(hc)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering[[1]][[2]][[2]] = dendrapply(hc[[1]][[2]][[2]], colbranches, "orange")
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering[[1]][[2]][[2]] = dendrapply(hClustering[[1]][[2]][[2]], colbranches, "orange")
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering[[1]][[2]] = dendrapply(hClustering[[1]][[2]], colbranches, "orange")
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering[[1]] = dendrapply(hClustering[[1]], colbranches, "orange")
hClustering
hClustering[[1]]
hClustering[[1]][[1]]
hClustering[[1]][[2]]
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
#hClustering[[1]][[2]] = dendrapply(hClustering[[1]][[2]], colbranches, "orange")
plot(hClustering, col=sapply(x,pal))
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering[[2]] = dendrapply(hClustering[[2]], colbranches, "orange")
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
hClustering = dendrapply(hClustering, colbranches, "orange")
hClustering[[1]][[2]]
class(hClustering[[1]][[2]])
class(hClustering[[1]])
class(hClustering[1])
class(hClustering[1][2])
hClustering
attributes(hClustering)
hclust$class
hClustering$class
hClustering
class(hClustering)
?hclust
hClustering$method
hClustering$members
hClustering$x
str(hClustering)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
hClustering[[1]][[2]] = dendrapply(hClustering[[1]][[2]], colbranches, "orange")
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
dendro[[1]][[2]] = dendrapply(dendro[[1]][[2]], colbranches, "orange")
plot(dendro)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
dendro[[2]][[1]] = dendrapply(dendro[[2]][[1]], colbranches, "orange")
dendro[[2]][[2]] = dendrapply(dendro[[2]][[2]], colbranches, "red")
dendro[[2]][[2]] = dendrapply(dendro[[2]][[2]], colbranches, "red")
plot(dendro)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
dendro[[2]][[1]] = dendrapply(dendro[[2]][[1]], colbranches, "orange")
dendro[[2]][[2]] = dendrapply(dendro[[2]][[2]], colbranches, "red")
dendro[[1]][[1]] = dendrapply(dendro[[2]][[2]], colbranches, "blue")
plot(dendro)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
dendro[[2]][[1]] = dendrapply(dendro[[2]][[1]], colbranches, "orange")
dendro[[2]][[2]] = dendrapply(dendro[[2]][[2]], colbranches, "red")
dendro[[1]][[1]] = dendrapply(dendro[[1]][[1]], colbranches, "blue")
plot(dendro)
distxy<- dist(dt)
hClustering<-hclust(distxy)
# Function to color branches
colbranches <- function(node, col){
# Find the attributes of current node
a <- attributes(node)
# Color edges with requested color
attr(node, "edgePar") <- c(a$edgePar, list(col=col, lwd=2))
# Return the node!
node
}
# get the dendrogram object
dendro <- as.dendrogram(hClustering)
dendro[[2]][[1]] = dendrapply(dendro[[2]][[1]], colbranches, "orange")
dendro[[2]][[2]] = dendrapply(dendro[[2]][[2]], colbranches, "red")
dendro[[1]] = dendrapply(dendro[[1]], colbranches, "blue")
plot(dendro)
distxy<- dist(dt)
hClustering<-hclust(distxy)
plclust(hClustering, lab = rep(1:3, each = 4), lab.col=rep(1:3, each = 4))
dataMatrix<-as.matrix(dt)[sample(1:12),]
heatmap(dataMatrix)
setwd("C:/gSource/Basic Methods/Hierarchical_Clustering")
data("mtcars")
library(data.table) #dt<-data("mtcars")
dt<-data.table("mtcars")
dt<-data.table(mtcars)
head(dt)
library(ggplot2)
?ggplot
ggplot(data=dt)
p1<-ggplot(data=dt)
p1<-p1+geom_point(x=hp,y=mpg,aes(col=cyl))
p1<-p1+geom_point(x=dt$hp,y=dt$mpg,aes(col=dt$cyl))
plot(p1)
?ggplot
p1<-ggplot(data=dt,hp,mpg)
p1<-ggplot(data=dt)
p1<-p1+geom_point(x=hp,y=mpg,aes(col=cyl))
p1<-p1+geom_point()
p1<-ggplot(data=dt)
p1<-p1+geom_point(aes(x=hp))
p1<-p1+geom_point(aes(x=hp,y=mpg))
plot(p1)
p1<-p1+geom_point(aes(x=hp,y=mpg))
p1<-p1+geom_point(aes(y=mpg))
plot(p1)
?geom_point
p1<-ggplot(data=dt,aes(x=hp,y=mpg))
plot(p1)
p1<-ggplot(data=dt,aes(x=hp,y=mpg))
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=cyl))
plot(p1)
dt[,cyl]
dt[,cyl]<-as.factor(dt[,cyl])
as.factor(dt[,cyl])
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=cyl))
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl))
)
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))
plot(p1)
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_line()
plot(p1)
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_line("smooth")
?geom_line
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth()
plot(p1)
?geom_smooth
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="glm")
plot(p1)
?geom_smooth
p1<-ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="glm",se=FALSE)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="glm",se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="rlm",se=FALSE))
?geom_smooth
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="glm",se=FALSE))
?geom_smooth
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",se=FALSE))
?geom_smooth
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~x,se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~exp(-x),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~ploy(x,3),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,5),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,4),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,4),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,2),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,1),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,10),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,6),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,16),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,12),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,11),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,10),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,7),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_errorbar())
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(position="identity")
)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(aes(label=cyl))
)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(aes(label=cyl)))
head(dt)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(aes(label=gear)))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(position="jitter",aes(label=gear)))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE)+geom_text(position="jitter",aes(label=qsec)))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(cyl)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec)))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=qsec)+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec)))
)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=qsec))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec))
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(qsec))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec))
)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(qsec))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec))
)
plot(ggplot(data=dt,aes(x=hp,y=mpg))+geom_point(aes(col=as.factor(qsec)))+geom_smooth(method="lm",formula= y~poly(x,3),se=FALSE))#+geom_text(position="jitter",aes(label=qsec))
